// ///////////////////////////////////////////////////////////
//         B Language Grammar
//       Earley EBNF-like grammar
//      Placed in **public domain**
// (No Warranty: Section 7-8 of Apache 2 License)
// ///////////////////////////////////////////////////////////

%import common.ESCAPED_STRING  -> STRING
%import common.DIGIT           -> DIGIT
%import common.LETTER          -> LETTER
%import common.WS              -> WHITESPACE
%ignore WHITESPACE             // Ignore whitespace
%ignore "/*" /.+/ "*/"        // Ignore comments


?program : ( definition ) *


definition : vector_definition
    | function_definition


vector_definition : name ( "[" ( constant ) ? "]" ) ? (ival ( ","? ival ) * )? terminate

function_definition.3 :  ( name "(" parameters? ")" block_statement )

ival : constant
    | name


statement : auto_statement
    | extrn_statement
    | label_statement
    | rvalue_statement
    | block_statement
    | case_statement
    | if_statement
    | while_statement
    | switch_statement
    | break_statement
    | goto_statement
    | return_statement

auto_statement : "auto" lvalue ("," lvalue )* terminate statement?

extrn_statement : "extrn" name ("," name)* terminate statement?

case_statement : "case" constant ":" statement

label_statement : name ":" statement

goto_statement : "goto" rvalue terminate

if_statement : "if" "(" rvalue ")" statement ("else" statement)?

return_statement : "return" ( "(" rvalue ")" )? terminate

rvalue_statement : rvalue * terminate

block_statement : ( "{" (statement) +  "}" )

while_statement : "while" "(" ( rvalue ) ")" statement

switch_statement : "switch" "(" rvalue ")" statement

break_statement : "break" terminate


expression : rvalue

rvalue : evaluated_expression
    | assignment_expression
    | pre_increment_expression
    | post_increment_expression
    | unary_expression
    | unary_address_of
    | relation_expression
    | ternary_expression
    | function_expression
    | constant_expression
    | lvalue_expression


?parameters: [ rvalue ( "," rvalue )* ]

function_expression : lvalue "(" parameters  ")" terminate

ternary_expression : rvalue "?" rvalue ":" rvalue

relation_expression : rvalue binary rvalue

address_of_expression : unary_address_of lvalue

unary_expression : unary rvalue

post_increment_expression : lvalue inc_dec

pre_increment_expression : inc_dec lvalue

assignment_expression : lvalue asignment_operator rvalue

constant_expression : constant

evaluated_expression : "(" rvalue ")"

lvalue_expression : lvalue


?lvalue.2: name                 -> identifier
    | unary_indirection rvalue  -> indirect_identifier
    | lvalue "[" rvalue "]"     -> vector_identifier

terminate : ";"

asignment_operator : equal [ binary ]


equal : "="


inc_dec : unary_inc
    | unary_dec


unary : unary_minus
    | unary_not
    | unary_ones_complement

unary_indirection : "*"

unary_address_of : "&"

unary_minus : "-"

unary_not : "!"

unary_inc : "++"

unary_dec : "--"

unary_ones_complement: "~"


binary : "|" -> or_operator
    | "&"    -> and_operator
    | "=="   -> eq_operator
    | "!="   -> neq_oeprator
    | "<"    -> lt_operator
    | "<="   -> lte_operator
    | ">"    -> gt_operator
    | ">="   -> gte_operator
    | "^"    -> xor_operator
    | "<<"   -> lshift_operator
    | ">>"   -> rshift_oeprator
    | "-"    -> sub_operator
    | "+"    -> add_operator
    | "%"    -> mod_operator
    | "*"    -> mul_operator
    | "/"    -> div_operator


constant : ( DIGIT ) +            -> number_literal
    | "'" ( char ) ~ 1 .. 4 "'"   -> constant_literal
    | /"(\\\"|\\\\|[^"\n])*?"i?/  -> string_literal


name : /[a-zA-Z_][a-zA-Z0-9]{0,7}/

// @TODO: machine portable
char : /[\x00-\x7F]/
