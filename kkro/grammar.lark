/////////
// B Language Grammar
// Earley EBNF-like grammar
// Placed separately in **public domain**
// (No Warranty: Section 7-8 of Apache License 2)
////////


%import common.ESCAPED_STRING  -> STRING
%import common.DIGIT           -> DIGIT
%import common.LETTER          -> LETTER
%import common.WS              -> WHITESPACE
%ignore WHITESPACE             // Ignore whitespace
%ignore "/*" /./ * "*/"        // Ignore comments


?program : ( definition ) *


?definition : vector_definition
    | function_definition


vector_definition : name ( "[" ( constant ) ? "]" ) ? (ival ( ","? ival ) * )? terminate

function_definition :  name "(" ( name ("," name)* ) ? ")" statement


ival : constant
    | name


statement : auto_statement
    | extrn_statement
    | label_statement
    | case_statement
    | block_statement
    | if_statement
    | while_statement
    | switch_statement
    | break_statement
    | goto_statement
    | return_statement
    | rvalue_statement

auto_statement : "auto" name (constant)? (","? name (constant)? )* terminate statement?

extrn_statement : "extrn" name (","? name)* terminate statement?

case_statement : "case" constant ":" statement

label_statement : name ":" statement

goto_statement: "goto" rvalue terminate

if_statement : "if" "(" rvalue ")" statement ("else" statement)?

return_statement : "return" ( "(" rvalue ")" )? terminate

rvalue_statement : ( rvalue )* terminate

block_statement : "{" (statement) * "}"

while_statement : "while" "(" rvalue ")" statement

switch_statement : "switch" "(" rvalue ")" statement

break_statement : "break" terminate

rvalue : "(" rvalue ")"
    | constant
    | lvalue assign rvalue
    | inc_dec lvalue
    | lvalue inc_dec
    | unary rvalue
    | unary_address_of lvalue
    | rvalue binary rvalue
    | rvalue "?" rvalue ":" rvalue
    | rvalue "(" ( rvalue (","? rvalue) * ) ? ")"
    | lvalue

lvalue: name
    | unary_indirection rvalue
    | rvalue "[" rvalue "]"

terminate : ";"

assign : equal (binary)?


equal : "="


inc_dec : unary_inc
    | unary_dec


unary : unary_minus
    | unary_not
    | unary_ones_complement

unary_indirection : "*"

unary_address_of : "&"

unary_minus : "-"

unary_not : "!"

unary_inc : "++"

unary_dec : "--"

unary_ones_complement: "~"


binary : "|"
    | "&"
    | "=="
    | "!="
    | "<"
    | "<="
    | ">"
    | ">="
    | "<<"
    | ">>"
    | "-"
    | "+"
    | "%"
    | "*"
    | "/"


constant : ( DIGIT ) +
    | "'" ( char ) ~ 1 .. 2 "'"
    | "\"" ( char ) * "\""


name : alpha (alphanumeric ~ 0 .. 7)


char : LETTER
    | DIGIT

alphanumeric : DIGIT
    | alpha


alpha : LETTER
    | "_"
