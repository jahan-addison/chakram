/////////////////////////////////////////////////////////////
//         B Language Grammar
//       Earley EBNF-like grammar
//      Placed in **public domain**
// (No Warranty: Section 7-8 of Apache 2 License)
/////////////////////////////////////////////////////////////


%import common.ESCAPED_STRING  -> STRING
%import common.DIGIT           -> DIGIT
%import common.LETTER          -> LETTER
%import common.WS              -> WHITESPACE
%ignore WHITESPACE             // Ignore whitespace
%ignore "/*" /./ * "*/"        // Ignore comments


?program : ( definition ) *


definition : vector_definition
    | function_definition


vector_definition : name ( "[" ( constant ) ? "]" ) ? (ival ( ","? ival ) * )? terminate

function_definition :  name "(" ( name ("," name)* ) ? ")" statement


ival : constant
    | name


statement.1 : auto_statement
    | extrn_statement
    | label_statement
    | case_statement
    | block_statement
    | if_statement
    | while_statement
    | switch_statement
    | break_statement
    | goto_statement
    | return_statement
    | rvalue_statement

auto_statement : "auto" name (constant)? (","? name (constant)? )* terminate statement?

extrn_statement : "extrn" name (","? name)* terminate statement?

case_statement : "case" constant ":" statement

label_statement : name ":" statement

goto_statement: "goto" rvalue terminate

if_statement : "if" "(" rvalue ")" statement ("else" statement)?

return_statement : "return" ( "(" rvalue ")" )? terminate

rvalue_statement.1 : ( rvalue )* terminate

block_statement : "{" (statement) * "}"

while_statement : "while" "(" rvalue ")" statement

switch_statement : "switch" "(" rvalue ")" statement

break_statement : "break" terminate

rvalue.2 : "(" rvalue ")"                           -> evaluated_expression
    | constant                                      -> constant_literal_expression
    | lvalue asignment_operator rvalue              -> assignment_expression
    | inc_dec lvalue                                -> pre_increment_expression
    | lvalue inc_dec                                -> post_increment_expression
    | unary rvalue                                  -> unary_expression
    | unary_address_of lvalue                       -> address_of_expression
    | rvalue binary rvalue                          -> relation_expression
    | rvalue "?" rvalue ":" rvalue                  -> ternary_expression
    | callable_expression
    | lvalue_expression


callable_expression.3 : rvalue "(" ( rvalue (","? rvalue) * ) ? ")"
lvalue_expression : lvalue


lvalue: name
    | unary_indirection rvalue
    | rvalue "[" rvalue "]"

terminate : ";"

asignment_operator : equal (binary)?


equal : "="


inc_dec : unary_inc
    | unary_dec


unary : unary_minus
    | unary_not
    | unary_ones_complement

unary_indirection : "*"

unary_address_of : "&"

unary_minus : "-"

unary_not : "!"

unary_inc : "++"

unary_dec : "--"

unary_ones_complement: "~"


binary : "|" -> or_operator
    | "&"    -> and_operator
    | "=="   -> eq_operator
    | "!="   -> neq_oeprator
    | "<"    -> lt_operator
    | "<="   -> lte_operator
    | ">"    -> gt_operator
    | ">="   -> gte_operator
    | "^"    -> xor_operator
    | "<<"   -> lshift_operator
    | ">>"   -> rshift_oeprator
    | "-"    -> sub_operator
    | "+"    -> add_operator
    | "%"    -> mod_operator
    | "*"    -> mul_operator
    | "/"    -> div_operator


constant : ( DIGIT ) +            -> number_literal
    | "'" ( char ) ~ 1 .. 4 "'"   -> constant_literal
    | /"(\\\"|\\\\|[^"\n])*?"i?/  -> string_literal


name : (alpha (alphanumeric ~ 0 .. 7))

// @TODO: machine portable
char : /[\x00-\x7F]/

alphanumeric : DIGIT
    | alpha


alpha : LETTER
    | "_"
