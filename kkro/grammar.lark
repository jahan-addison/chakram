/////////
// B Language Grammar
// Placed separately in **public domain**
// * No Warranty *
////////


%import common.ESCAPED_STRING  -> STRING
%import common.DIGIT           -> DIGIT
%import common.LETTER          -> LETTER
%import common.WS              -> WHITESPACE
%ignore WHITESPACE             // Ignore whitespace
%ignore "/*" /.+/ "*/"         // Ignore comments


start : ( definition ) *


definition : name ( "[" ( constant ) ? "]" ) ? (ival ( "," ival ) * )? terminate
    | name "(" ( name ( "," name)* ) ? ")" statement


ival : constant
    | name


statement : auto_statement
    | extrn_statement
    | label_statement
    | case_statement
    | block_statement
    | if_statement
    | while_statement
    | switch_statement
    | break_statement
    | goto_statement
    | return_statement
    | rvalue_statement

auto_statement : "auto" name (constant)? (","? name (constant)? )* terminate statement?

extrn_statement : "extrn" name (","? name)* terminate statement?

case_statement : "case" constant ":" statement

label_statement : name ":" statement

goto_statement: "goto" rvalue terminate

if_statement : "if" "(" rvalue ")" statement ("else" statement)?

return_statement : "return" ( "(" rvalue ")" )? terminate

rvalue_statement : ( rvalue )? terminate

block_statement : "{" (statement) * "}"

while_statement : "while" "(" rvalue ")" statement

switch_statement : "switch" "(" rvalue ")" statement

break_statement : "break" terminate

rvalue : "(" rvalue ")"
    | lvalue
    | constant
    | lvalue assign rvalue
    | inc_dec lvalue
    | lvalue inc_dec
    | unary rvalue
    | "&" lvalue
    | rvalue binary rvalue
    | rvalue "?" rvalue ":" rvalue
    | rvalue "(" ( rvalue ("," rvalue) * ) ? ")"


terminate : ";"

assign : equal (binary) ?


equal : "="


inc_dec : inc
    | dec


dec : "--"


inc : "++"


unary : "-"
    | "!"


binary : "|"
    | "&"
    | "=="
    | "!="
    | "<"
    | "<="
    | ">"
    | ">="
    | "<<"
    | ">>"
    | "-"
    | "+"
    | "%"
    | "*"
    | "/"


lvalue : name
    | "*" rvalue
    | rvalue "[" rvalue "]"


constant : ( DIGIT ) +
    | "'" ( LETTER ) ~ 1 .. 2 "'"
    | "\"" ( LETTER ) * "\""


name : alpha (alphanumeric ~ 7)


alphanumeric : DIGIT
    | alpha


alpha : LETTER
    | "_"
