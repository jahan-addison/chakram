/////////////////////////////////////////////////////////////
//         B Language Grammar
//       Earley EBNF-like grammar
//      Placed in **public domain**
// (No Warranty: Section 7-8 of Apache 2 License)
/////////////////////////////////////////////////////////////

%import common.ESCAPED_STRING  -> STRING
%import common.DIGIT           -> DIGIT
%import common.LETTER          -> LETTER
%import common.WS              -> WHITESPACE

program : ( definition ) *

definition : vector_definition
    | function_definition

vector_definition   :  NAME ( "[" ( constant ) ? "]" ) ? (ival ( ","? ival ) * )? TERMINATE

function_definition :  ( NAME "(" parameters ")" block_statement )

parameters          :  [ rvalue (( "," rvalue ) *) ]

ival : constant
    | NAME


statement : block_statement
    | auto_statement
    | extrn_statement
    | label_statement
    | rvalue_statement
    | case_statement
    | if_statement
    | while_statement
    | switch_statement
    | break_statement
    | goto_statement
    | return_statement


auto_statement     : "auto" lvalue ("," lvalue )* TERMINATE statement?

extrn_statement    : "extrn" NAME ("," NAME)* TERMINATE statement?

case_statement     : "case" constant ":" statement

label_statement    :  NAME ":" statement

goto_statement     : "goto" rvalue TERMINATE

if_statement       : "if" "(" rvalue ")" statement

return_statement   : "return" ( "(" rvalue ")" )? TERMINATE

rvalue_statement   :  (rvalue *) TERMINATE

optional_statement :  (TERMINATE | statement)

block_statement    :  ( "{" (statement) *  "}" )

while_statement    :  "while" "(" ( rvalue ) ")" optional_statement

switch_statement   :  "switch" "(" rvalue ")" statement

break_statement    :  "break" TERMINATE



rvalue : evaluated_expression
    | assignment_expression
    | pre_inc_dec_expression
    | post_inc_dec_expression
    | unary_expression
    | unary_address_of
    | relation_expression
    | ternary_expression
    | function_expression
    | constant_expression
    | lvalue_expression


function_expression     : lvalue "(" parameters  ")"

ternary_expression      : rvalue "?" rvalue ":" rvalue

relation_expression     : rvalue binary rvalue

address_of_expression   : unary_address_of lvalue

unary_expression        : unary rvalue

post_inc_dec_expression : lvalue inc_dec

pre_inc_dec_expression  : inc_dec lvalue

assignment_expression   : lvalue asignment_operator rvalue

constant_expression     : constant

evaluated_expression    :  /[^a-zA-Z_0-9]/ "(" rvalue ")"

lvalue_expression       : lvalue



?lvalue: NAME                   -> identifier
    | unary_indirection rvalue  -> indirect_identifier
    | lvalue "[" rvalue "]"     -> vector_identifier


asignment_operator : EQUAL [ binary ]

?inc_dec : unary_inc
    | unary_dec


?unary : unary_minus
    | unary_not
    | unary_ones_complement

unary_indirection     : "*"
unary_address_of      : "&"
unary_minus           : "-"
unary_not             : "!"
unary_inc             : "++"
unary_dec             : "--"
unary_ones_complement : "~"


?binary : "|" -> or_operator
    | "&"     -> and_operator
    | "=="    -> eq_operator
    | "!="    -> neq_oeprator
    | "<"     -> lt_operator
    | "<="    -> lte_operator
    | ">"     -> gt_operator
    | ">="    -> gte_operator
    | "^"     -> xor_operator
    | "<<"    -> lshift_operator
    | ">>"    -> rshift_operator
    | "-"     -> sub_operator
    | "+"     -> add_operator
    | "%"     -> mod_operator
    | "*"     -> mul_operator
    | "/"     -> div_operator



constant  : /[0-9]/ +             -> number_literal
    | "'" ( CHAR ) ~ 1 .. 4 "'"   -> constant_literal
    | /"(\\\"|\\\\|[^"\n])*?"i?/  -> string_literal


EQUAL     : "="

TERMINATE : ";"

NAME      : /(?!if|while|return)[a-zA-Z_][a-z._A-Z0-9]{0,7}/

CHAR      : /[\x00-\x7F]/

COMMENT   : "/*" /.*?/ "*/"

%ignore WHITESPACE        // Ignore whitespace
%ignore COMMENT           // Ignore comments
