import pytest

@pytest.fixture # type: ignore
def program_example_3_parse_tree() -> str:
  return """Tree(Token('RULE', 'program'), [Tree(Token('RULE', 'definition'), [Tree(Token('RULE', 'function_definition'), [Token('NAME', 'snide'), Tree(Token('RULE', 'parameters'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'lvalue_expression'), [Tree('identifier', [Token('NAME', 'errno')])])])]), Tree(Token('RULE', 'block_statement'), [Tree(Token('RULE', 'statement'), [Tree(Token('RULE', 'extrn_statement'), [Token('NAME', 'wr.unit'), Token('NAME', 'mess'), Token('TERMINATE', ';'), Tree(Token('RULE', 'statement'), [Tree(Token('RULE', 'auto_statement'), [Tree('identifier', [Token('NAME', 'u')]), Token('TERMINATE', ';'), Tree(Token('RULE', 'statement'), [Tree(Token('RULE', 'rvalue_statement'), [Tree(Token('RULE', 'expression'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'assignment_expression'), [Tree('identifier', [Token('NAME', 'u')]), Tree(Token('RULE', 'assignment_operator'), [Token('EQUAL', '='), None]), Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'lvalue_expression'), [Tree('identifier', [Token('NAME', 'wr.unit')])])])])]), Token('TERMINATE', ';')]), Tree(Token('RULE', 'expression'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'assignment_expression'), [Tree('identifier', [Token('NAME', 'wr.unit')]), Tree(Token('RULE', 'assignment_operator'), [Token('EQUAL', '='), None]), Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'constant_expression'), [Tree('number_literal', [Token('__ANON_9', '1')])])])])]), Token('TERMINATE', ';')]), Tree(Token('RULE', 'expression'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'function_expression'), [Tree('identifier', [Token('NAME', 'printf')]), Tree(Token('RULE', 'parameters'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'constant_expression'), [Tree('string_literal', [Token('__ANON_11', '"error number %d, %s*n\'*,errno,mess[errno]"')])])])])])]), Token('TERMINATE', ';')]), Tree(Token('RULE', 'expression'), [Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'assignment_expression'), [Tree('identifier', [Token('NAME', 'wr.unit')]), Tree(Token('RULE', 'assignment_operator'), [Token('EQUAL', '='), None]), Tree(Token('RULE', 'rvalue'), [Tree(Token('RULE', 'lvalue_expression'), [Tree('identifier', [Token('NAME', 'u')])])])])]), Token('TERMINATE', ';')])])])])])])])])])]), Tree(Token('RULE', 'definition'), [Tree(Token('RULE', 'vector_definition'), [Token('NAME', 'mess'), Tree('number_literal', [Token('__ANON_9', '5')]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"too bad"')])]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"tough luck"')])]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"sorry, Charlie"')])]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"that\'s the breaks"')])]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"what a shame"')])]), Tree(Token('RULE', 'ival'), [Tree('string_literal', [Token('__ANON_11', '"some days you can\'t win"')])]), Token('TERMINATE', ';')])])])"""
