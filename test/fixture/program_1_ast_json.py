import pytest

@pytest.fixture # type: ignore
def program_example_1_ast_json() -> str:
    return """{'node': 'program', 'root': 'definitions', 'left': [{'node': 'function_definition', 'root': 'main', 'left': [None], 'right': {'node': 'statement', 'root': 'block', 'left': [{'node': 'statement', 'root': 'auto', 'left': [{'node': 'lvalue', 'root': 'j'}, {'node': 'vector_lvalue', 'root': 's', 'left': {'node': 'number_literal', 'root': 20}}, {'node': 'vector_lvalue', 'root': 't', 'left': {'node': 'number_literal', 'root': 20}}]}, {'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'function_expression', 'root': 'reread', 'left': {'node': 'lvalue', 'root': 'reread'}, 'right': [None]}], [{'node': 'function_expression', 'root': 'getstr', 'left': {'node': 'lvalue', 'root': 'getstr'}, 'right': [{'node': 'lvalue', 'root': 's'}]}], [{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'j'}, 'right': {'node': 'function_expression', 'root': 'getarg', 'left': {'node': 'lvalue', 'root': 'getarg'}, 'right': [{'node': 'lvalue', 'root': 't'}, {'node': 'lvalue', 'root': 's'}, {'node': 'number_literal', 'root': 0}]}}], [{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'j'}, 'right': {'node': 'function_expression', 'root': 'getarg', 'left': {'node': 'lvalue', 'root': 'getarg'}, 'right': [{'node': 'lvalue', 'root': 't'}, {'node': 'lvalue', 'root': 's'}, {'node': 'lvalue', 'root': 'j'}]}}], [{'node': 'function_expression', 'root': 'openr', 'left': {'node': 'lvalue', 'root': 'openr'}, 'right': [{'node': 'number_literal', 'root': 5}, {'node': 'lvalue', 'root': 't'}]}], [{'node': 'function_expression', 'root': 'getarg', 'left': {'node': 'lvalue', 'root': 'getarg'}, 'right': [{'node': 'lvalue', 'root': 't'}, {'node': 'lvalue', 'root': 's'}, {'node': 'lvalue', 'root': 'j'}]}], [{'node': 'function_expression', 'root': 'openw', 'left': {'node': 'lvalue', 'root': 'openw'}, 'right': [{'node': 'number_literal', 'root': 6}, {'node': 'lvalue', 'root': 't'}]}]]}, {'node': 'statement', 'root': 'while', 'left': {'node': 'relation_expression', 'root': ['!='], 'left': {'node': 'function_expression', 'root': 'putchar', 'left': {'node': 'lvalue', 'root': 'putchar'}, 'right': [{'node': 'function_expression', 'root': 'getchar', 'left': {'node': 'lvalue', 'root': 'getchar'}, 'right': [None]}]}, 'right': {'node': 'constant_literal', 'root': '*e'}}, 'right': {'node': 'statement', 'root': 'rvalue', 'left': [[]]}}]}}, {'node': 'function_definition', 'root': 'convert', 'left': [{'node': 'lvalue', 'root': 's'}, {'node': 'lvalue', 'root': 'v'}], 'right': {'node': 'statement', 'root': 'block', 'left': [{'node': 'statement', 'root': 'auto', 'left': [{'node': 'lvalue', 'root': 'm'}, {'node': 'lvalue', 'root': 'i'}, {'node': 'lvalue', 'root': 'j'}, {'node': 'lvalue', 'root': 'c'}, {'node': 'lvalue', 'root': 'sign'}]}, {'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'i'}, 'right': {'node': 'lvalue', 'root': 'O'}}], [{'node': 'assignment_expression', 'root': ['=', '-'], 'left': {'node': 'lvalue', 'root': 'j'}, 'right': {'node': 'number_literal', 'root': 1}}]]}, {'node': 'statement', 'root': 'label', 'left': {'node': 'lvalue', 'root': 'init:'}}, {'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'm'}, 'right': {'node': 'number_literal', 'root': 0}}], [{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'sign'}, 'right': {'node': 'number_literal', 'root': 0}}]]}, {'node': 'statement', 'root': 'label', 'left': {'node': 'lvalue', 'root': 'loop:'}}, {'node': 'statement', 'root': 'switch', 'left': {'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'C'}, 'right': {'node': 'function_expression', 'root': 'char', 'left': {'node': 'lvalue', 'root': 'char'}, 'right': [{'node': 'lvalue', 'root': 's'}, {'node': 'pre_inc_dec_expression', 'root': ['++'], 'left': {'node': 'lvalue', 'root': 'j'}}]}}, 'right': [{'node': 'statement', 'root': 'case', 'left': {'node': 'constant_literal', 'root': '-'}, 'right': [{'node': 'statement', 'root': 'if', 'left': {'node': 'lvalue', 'root': 'sign'}, 'right': {'node': 'statement', 'root': 'goto', 'left': {'node': 'lvalue', 'root': 'syntax'}}}, {'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 's'}, 'right': {'node': 'number_literal', 'root': 1}}]]}]}, {'node': 'statement', 'root': 'case', 'left': {'node': 'constant_literal', 'root': "' '"}, 'right': [{'node': 'statement', 'root': 'goto', 'left': {'node': 'lvalue', 'root': 'loop'}}]}, {'node': 'statement', 'root': 'case', 'left': {'node': 'constant_literal', 'root': '*e'}, 'right': []}, {'node': 'statement', 'root': 'case', 'left': {'node': 'constant_literal', 'root': ','}, 'right': [{'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'vector_lvalue', 'root': 'v', 'left': {'node': 'post_inc_dec_expression', 'root': ['++'], 'right': {'node': 'lvalue', 'root': 'i'}}}, 'right': {'node': 'ternary_expression', 'root': {'node': 'lvalue', 'root': 'sign'}, 'left': {'node': 'evaluated_expression', 'root': {'node': 'unary_expression', 'root': ['-'], 'left': {'node': 'lvalue', 'root': 'm'}}}, 'right': {'node': 'lvalue', 'root': 'm'}}}]]}, {'node': 'statement', 'root': 'if', 'left': {'node': 'relation_expression', 'root': ['=='], 'left': {'node': 'lvalue', 'root': 'c'}, 'right': {'node': 'constant_literal', 'root': '*e'}}, 'right': {'node': 'statement', 'root': 'return', 'left': [{'node': 'lvalue', 'root': 'i'}]}}, {'node': 'statement', 'root': 'goto', 'left': {'node': 'lvalue', 'root': 'init'}}]}]}, {'node': 'statement', 'root': 'if', 'left': {'node': 'relation_expression', 'root': ['<='], 'left': {'node': 'constant_literal', 'root': '0'}, 'right': {'node': 'relation_expression', 'root': ['&&'], 'left': {'node': 'lvalue', 'root': 'c'}, 'right': {'node': 'relation_expression', 'root': ['<='], 'left': {'node': 'lvalue', 'root': 'c'}, 'right': {'node': 'constant_literal', 'root': '9'}}}}, 'right': {'node': 'statement', 'root': 'block', 'left': [{'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'assignment_expression', 'root': ['=', None], 'left': {'node': 'lvalue', 'root': 'm'}, 'right': {'node': 'relation_expression', 'root': ['*'], 'left': {'node': 'number_literal', 'root': 10}, 'right': {'node': 'relation_expression', 'root': ['+'], 'left': {'node': 'lvalue', 'root': 'm'}, 'right': {'node': 'relation_expression', 'root': ['-'], 'left': {'node': 'lvalue', 'root': 'c'}, 'right': {'node': 'constant_literal', 'root': '0'}}}}}]]}, {'node': 'statement', 'root': 'goto', 'left': {'node': 'lvalue', 'root': 'loop'}}]}}, {'node': 'statement', 'root': 'label', 'left': {'node': 'lvalue', 'root': 'syntax:'}}, {'node': 'statement', 'root': 'rvalue', 'left': [[{'node': 'function_expression', 'root': 'printf', 'left': {'node': 'lvalue', 'root': 'printf'}, 'right': [{'node': 'string_literal', 'root': '"bad syntax*n"'}]}]]}, {'node': 'statement', 'root': 'return', 'left': [{'node': 'unary_expression', 'root': ['-'], 'left': {'node': 'number_literal', 'root': 1}}]}]}}]}"""

@pytest.fixture # type: ignore
def program_examle_1_ast_json_meta() -> str:
    return r"""{"node": "program", "root": "definitions", "left": [{"node": "function_definition", "root": "main", "_meta": {"line": 9, "start_pos": 211, "column": 1, "end_pos": 215, "end_column": 5}, "left": [null], "right": {"node": "statement", "root": "block", "left": [{"node": "statement", "root": "auto", "left": [{"node": "lvalue", "root": "j", "_meta": {"line": 10, "start_pos": 229, "column": 9, "end_pos": 230, "end_column": 10}}, {"node": "vector_lvalue", "root": "s", "left": {"node": "number_literal", "root": 20, "_meta": {"line": 10, "start_pos": 233, "column": 13, "end_pos": 235, "end_column": 15}}}, {"node": "vector_lvalue", "root": "t", "left": {"node": "number_literal", "root": 20, "_meta": {"line": 10, "start_pos": 239, "column": 19, "end_pos": 241, "end_column": 21}}}]}, {"node": "statement", "root": "rvalue", "left": [[{"node": "function_expression", "root": "reread", "left": {"node": "lvalue", "root": "reread", "_meta": {"line": 11, "start_pos": 247, "column": 4, "end_pos": 253, "end_column": 10}}, "right": [null]}], [{"node": "function_expression", "root": "getstr", "left": {"node": "lvalue", "root": "getstr", "_meta": {"line": 12, "start_pos": 283, "column": 4, "end_pos": 289, "end_column": 10}}, "right": [{"node": "lvalue", "root": "s", "_meta": {"line": 12, "start_pos": 290, "column": 11, "end_pos": 291, "end_column": 12}}]}], [{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "j", "_meta": {"line": 13, "start_pos": 314, "column": 4, "end_pos": 315, "end_column": 5}}, "right": {"node": "function_expression", "root": "getarg", "left": {"node": "lvalue", "root": "getarg", "_meta": {"line": 13, "start_pos": 318, "column": 8, "end_pos": 324, "end_column": 14}}, "right": [{"node": "lvalue", "root": "t", "_meta": {"line": 13, "start_pos": 325, "column": 15, "end_pos": 326, "end_column": 16}}, {"node": "lvalue", "root": "s", "_meta": {"line": 13, "start_pos": 327, "column": 17, "end_pos": 328, "end_column": 18}}, {"node": "number_literal", "root": 0, "_meta": {"line": 13, "start_pos": 329, "column": 19, "end_pos": 330, "end_column": 20}}]}}], [{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "j", "_meta": {"line": 14, "start_pos": 355, "column": 4, "end_pos": 356, "end_column": 5}}, "right": {"node": "function_expression", "root": "getarg", "left": {"node": "lvalue", "root": "getarg", "_meta": {"line": 14, "start_pos": 359, "column": 8, "end_pos": 365, "end_column": 14}}, "right": [{"node": "lvalue", "root": "t", "_meta": {"line": 14, "start_pos": 366, "column": 15, "end_pos": 367, "end_column": 16}}, {"node": "lvalue", "root": "s", "_meta": {"line": 14, "start_pos": 368, "column": 17, "end_pos": 369, "end_column": 18}}, {"node": "lvalue", "root": "j", "_meta": {"line": 14, "start_pos": 370, "column": 19, "end_pos": 371, "end_column": 20}}]}}], [{"node": "function_expression", "root": "openr", "left": {"node": "lvalue", "root": "openr", "_meta": {"line": 15, "start_pos": 389, "column": 4, "end_pos": 394, "end_column": 9}}, "right": [{"node": "number_literal", "root": 5, "_meta": {"line": 15, "start_pos": 396, "column": 11, "end_pos": 397, "end_column": 12}}, {"node": "lvalue", "root": "t", "_meta": {"line": 15, "start_pos": 398, "column": 13, "end_pos": 399, "end_column": 14}}]}], [{"node": "function_expression", "root": "getarg", "left": {"node": "lvalue", "root": "getarg", "_meta": {"line": 16, "start_pos": 406, "column": 4, "end_pos": 412, "end_column": 10}}, "right": [{"node": "lvalue", "root": "t", "_meta": {"line": 16, "start_pos": 413, "column": 11, "end_pos": 414, "end_column": 12}}, {"node": "lvalue", "root": "s", "_meta": {"line": 16, "start_pos": 415, "column": 13, "end_pos": 416, "end_column": 14}}, {"node": "lvalue", "root": "j", "_meta": {"line": 16, "start_pos": 417, "column": 15, "end_pos": 418, "end_column": 16}}]}], [{"node": "function_expression", "root": "openw", "left": {"node": "lvalue", "root": "openw", "_meta": {"line": 17, "start_pos": 436, "column": 4, "end_pos": 441, "end_column": 9}}, "right": [{"node": "number_literal", "root": 6, "_meta": {"line": 17, "start_pos": 443, "column": 11, "end_pos": 444, "end_column": 12}}, {"node": "lvalue", "root": "t", "_meta": {"line": 17, "start_pos": 445, "column": 13, "end_pos": 446, "end_column": 14}}]}]]}, {"node": "statement", "root": "while", "left": {"node": "relation_expression", "root": ["!="], "left": {"node": "function_expression", "root": "putchar", "left": {"node": "lvalue", "root": "putchar", "_meta": {"line": 18, "start_pos": 460, "column": 11, "end_pos": 467, "end_column": 18}}, "right": [{"node": "function_expression", "root": "getchar", "left": {"node": "lvalue", "root": "getchar", "_meta": {"line": 18, "start_pos": 469, "column": 20, "end_pos": 476, "end_column": 27}}, "right": [null]}]}, "right": {"node": "constant_literal", "root": "*e", "_meta": {"line": 18, "start_pos": 486, "column": 37, "end_pos": 487, "end_column": 38}}}, "right": {"node": "statement", "root": "rvalue", "left": [[]]}}]}}, {"node": "function_definition", "root": "convert", "_meta": {"line": 29, "start_pos": 857, "column": 1, "end_pos": 864, "end_column": 8}, "left": [{"node": "lvalue", "root": "s", "_meta": {"line": 29, "start_pos": 865, "column": 9, "end_pos": 866, "end_column": 10}}, {"node": "lvalue", "root": "v", "_meta": {"line": 29, "start_pos": 867, "column": 11, "end_pos": 868, "end_column": 12}}], "right": {"node": "statement", "root": "block", "left": [{"node": "statement", "root": "auto", "left": [{"node": "lvalue", "root": "m", "_meta": {"line": 31, "start_pos": 881, "column": 9, "end_pos": 882, "end_column": 10}}, {"node": "lvalue", "root": "i", "_meta": {"line": 31, "start_pos": 883, "column": 11, "end_pos": 884, "end_column": 12}}, {"node": "lvalue", "root": "j", "_meta": {"line": 31, "start_pos": 885, "column": 13, "end_pos": 886, "end_column": 14}}, {"node": "lvalue", "root": "c", "_meta": {"line": 31, "start_pos": 887, "column": 15, "end_pos": 888, "end_column": 16}}, {"node": "lvalue", "root": "sign", "_meta": {"line": 31, "start_pos": 889, "column": 17, "end_pos": 893, "end_column": 21}}]}, {"node": "statement", "root": "rvalue", "left": [[{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "i", "_meta": {"line": 32, "start_pos": 898, "column": 4, "end_pos": 899, "end_column": 5}}, "right": {"node": "lvalue", "root": "O", "_meta": {"line": 32, "start_pos": 902, "column": 8, "end_pos": 903, "end_column": 9}}}], [{"node": "assignment_expression", "root": ["=", "-"], "left": {"node": "lvalue", "root": "j", "_meta": {"line": 33, "start_pos": 908, "column": 4, "end_pos": 909, "end_column": 5}}, "right": {"node": "number_literal", "root": 1, "_meta": {"line": 33, "start_pos": 912, "column": 8, "end_pos": 913, "end_column": 9}}}]]}, {"node": "statement", "root": "label", "_meta": {"line": 35, "start_pos": 916, "column": 1, "end_pos": 921, "end_column": 6}, "left": {"node": "lvalue", "root": "init:"}}, {"node": "statement", "root": "rvalue", "left": [[{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "m", "_meta": {"line": 36, "start_pos": 964, "column": 4, "end_pos": 965, "end_column": 5}}, "right": {"node": "number_literal", "root": 0, "_meta": {"line": 36, "start_pos": 968, "column": 8, "end_pos": 969, "end_column": 9}}}], [{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "sign", "_meta": {"line": 37, "start_pos": 998, "column": 4, "end_pos": 1002, "end_column": 8}}, "right": {"node": "number_literal", "root": 0, "_meta": {"line": 37, "start_pos": 1005, "column": 11, "end_pos": 1006, "end_column": 12}}}]]}, {"node": "statement", "root": "label", "_meta": {"line": 39, "start_pos": 1051, "column": 1, "end_pos": 1056, "end_column": 6}, "left": {"node": "lvalue", "root": "loop:"}}, {"node": "statement", "root": "switch", "left": {"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "C", "_meta": {"line": 41, "start_pos": 1094, "column": 12, "end_pos": 1095, "end_column": 13}}, "right": {"node": "function_expression", "root": "char", "left": {"node": "lvalue", "root": "char", "_meta": {"line": 41, "start_pos": 1098, "column": 16, "end_pos": 1102, "end_column": 20}}, "right": [{"node": "lvalue", "root": "s", "_meta": {"line": 41, "start_pos": 1103, "column": 21, "end_pos": 1104, "end_column": 22}}, {"node": "pre_inc_dec_expression", "root": ["++"], "left": {"node": "lvalue", "root": "j", "_meta": {"line": 41, "start_pos": 1107, "column": 25, "end_pos": 1108, "end_column": 26}}}]}}, "right": [{"node": "statement", "root": "case", "left": {"node": "constant_literal", "root": "-", "_meta": {"line": 43, "start_pos": 1122, "column": 10, "end_pos": 1123, "end_column": 11}}, "right": [{"node": "statement", "root": "if", "left": {"node": "lvalue", "root": "sign", "_meta": {"line": 44, "start_pos": 1135, "column": 10, "end_pos": 1139, "end_column": 14}}, "right": {"node": "statement", "root": "goto", "_meta": {"line": 44, "start_pos": 1146, "column": 21, "end_pos": 1152, "end_column": 27}, "left": {"node": "lvalue", "root": "syntax"}}}, {"node": "statement", "root": "rvalue", "left": [[{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "s", "_meta": {"line": 45, "start_pos": 1159, "column": 6, "end_pos": 1160, "end_column": 7}}, "right": {"node": "number_literal", "root": 1, "_meta": {"line": 45, "start_pos": 1163, "column": 10, "end_pos": 1164, "end_column": 11}}}]]}]}, {"node": "statement", "root": "case", "left": {"node": "constant_literal", "root": "' '", "_meta": {"line": 47, "start_pos": 1175, "column": 9, "end_pos": 1178, "end_column": 12}}, "right": [{"node": "statement", "root": "goto", "_meta": {"line": 48, "start_pos": 1191, "column": 12, "end_pos": 1195, "end_column": 16}, "left": {"node": "lvalue", "root": "loop"}}]}, {"node": "statement", "root": "case", "left": {"node": "constant_literal", "root": "*e", "_meta": {"line": 50, "start_pos": 1209, "column": 12, "end_pos": 1210, "end_column": 13}}, "right": []}, {"node": "statement", "root": "case", "left": {"node": "constant_literal", "root": ",", "_meta": {"line": 51, "start_pos": 1222, "column": 10, "end_pos": 1223, "end_column": 11}}, "right": [{"node": "statement", "root": "rvalue", "left": [[{"node": "assignment_expression", "root": ["=", null], "left": {"node": "vector_lvalue", "root": "v", "left": {"node": "post_inc_dec_expression", "root": ["++"], "right": {"node": "lvalue", "root": "i", "_meta": {"line": 53, "start_pos": 1280, "column": 9, "end_pos": 1281, "end_column": 10}}}}, "right": {"node": "ternary_expression", "root": {"node": "lvalue", "root": "sign", "_meta": {"line": 53, "start_pos": 1287, "column": 16, "end_pos": 1291, "end_column": 20}}, "left": {"node": "evaluated_expression", "root": {"node": "unary_expression", "root": ["-"], "left": {"node": "lvalue", "root": "m", "_meta": {"line": 53, "start_pos": 1294, "column": 23, "end_pos": 1295, "end_column": 24}}}}, "right": {"node": "lvalue", "root": "m", "_meta": {"line": 53, "start_pos": 1297, "column": 26, "end_pos": 1298, "end_column": 27}}}}]]}, {"node": "statement", "root": "if", "left": {"node": "relation_expression", "root": ["=="], "left": {"node": "lvalue", "root": "c", "_meta": {"line": 54, "start_pos": 1310, "column": 11, "end_pos": 1311, "end_column": 12}}, "right": {"node": "constant_literal", "root": "*e", "_meta": {"line": 54, "start_pos": 1317, "column": 18, "end_pos": 1318, "end_column": 19}}}, "right": {"node": "statement", "root": "return", "left": [{"node": "lvalue", "root": "i", "_meta": {"line": 54, "start_pos": 1329, "column": 30, "end_pos": 1330, "end_column": 31}}]}}, {"node": "statement", "root": "goto", "_meta": {"line": 55, "start_pos": 1344, "column": 12, "end_pos": 1348, "end_column": 16}, "left": {"node": "lvalue", "root": "init"}}]}]}, {"node": "statement", "root": "if", "left": {"node": "relation_expression", "root": ["<="], "left": {"node": "constant_literal", "root": "0", "_meta": {"line": 60, "start_pos": 1426, "column": 10, "end_pos": 1427, "end_column": 11}}, "right": {"node": "relation_expression", "root": ["&&"], "left": {"node": "lvalue", "root": "c", "_meta": {"line": 60, "start_pos": 1432, "column": 16, "end_pos": 1433, "end_column": 17}}, "right": {"node": "relation_expression", "root": ["<="], "left": {"node": "lvalue", "root": "c", "_meta": {"line": 60, "start_pos": 1436, "column": 20, "end_pos": 1437, "end_column": 21}}, "right": {"node": "constant_literal", "root": "9", "_meta": {"line": 60, "start_pos": 1442, "column": 26, "end_pos": 1443, "end_column": 27}}}}}, "right": {"node": "statement", "root": "block", "left": [{"node": "statement", "root": "rvalue", "left": [[{"node": "assignment_expression", "root": ["=", null], "left": {"node": "lvalue", "root": "m", "_meta": {"line": 61, "start_pos": 1454, "column": 7, "end_pos": 1455, "end_column": 8}}, "right": {"node": "relation_expression", "root": ["*"], "left": {"node": "number_literal", "root": 10, "_meta": {"line": 61, "start_pos": 1458, "column": 11, "end_pos": 1460, "end_column": 13}}, "right": {"node": "relation_expression", "root": ["+"], "left": {"node": "lvalue", "root": "m", "_meta": {"line": 61, "start_pos": 1461, "column": 14, "end_pos": 1462, "end_column": 15}}, "right": {"node": "relation_expression", "root": ["-"], "left": {"node": "lvalue", "root": "c", "_meta": {"line": 61, "start_pos": 1465, "column": 18, "end_pos": 1466, "end_column": 19}}, "right": {"node": "constant_literal", "root": "0", "_meta": {"line": 61, "start_pos": 1469, "column": 22, "end_pos": 1470, "end_column": 23}}}}}}]]}, {"node": "statement", "root": "goto", "_meta": {"line": 62, "start_pos": 1484, "column": 12, "end_pos": 1488, "end_column": 16}, "left": {"node": "lvalue", "root": "loop"}}]}}, {"node": "statement", "root": "label", "_meta": {"line": 67, "start_pos": 1553, "column": 1, "end_pos": 1560, "end_column": 8}, "left": {"node": "lvalue", "root": "syntax:"}}, {"node": "statement", "root": "rvalue", "left": [[{"node": "function_expression", "root": "printf", "left": {"node": "lvalue", "root": "printf", "_meta": {"line": 68, "start_pos": 1564, "column": 4, "end_pos": 1570, "end_column": 10}}, "right": [{"node": "string_literal", "root": "\"bad syntax*n\"", "_meta": {"line": 68, "start_pos": 1571, "column": 11, "end_pos": 1585, "end_column": 25}}]}]]}, {"node": "statement", "root": "return", "left": [{"node": "unary_expression", "root": ["-"], "left": {"node": "number_literal", "root": 1, "_meta": {"line": 69, "start_pos": 1599, "column": 12, "end_pos": 1600, "end_column": 13}}}]}]}}]}"""